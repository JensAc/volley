<table id="player-table" class="ui celled striped sortable table">
    <thead>
    <tr>
        <th data-title="Player" data-content="The name of the player">Player</th>
        <th class="num" data-title="Games" data-content="The total number of games">#</th>
        <th class="num" data-title="Wins" data-content="The total number of wins">W</th>
        <th class="num" data-title="Losses" data-content="The total number of losses">L</th>
        <th class="num" data-title="Win Ratio" data-content="The Ratio of Wins to Losses">W/L</th>
        <th class="num" data-title="Confidence" data-content="The standard deviation of the skill value">σ</th>
        <th class="num" data-title="Skill"
            data-content="The expected skill of the player based on all previous matches">μ</th>
        <th class="num sorted descending" data-title="Rating"
            data-content="A Rating for the player based on both μ and σ"><span style="font-size:0.8rem">Rating</span></th>
        <th data-title="95% Confidence Interval"
            data-content="If the bar does not overlap with that of another player, we are 95% sure that the one with higher skill is actually the better player.">
            Interval
        </th>
    </tr>
    </thead>
    <tbody>
    {% for p in players %}
        <!-- <tr style="opacity:{{ "%0.2f" % (1 - (p.confidence() - 2) / 8) }}"> -->
        <td>{{ p.name }}</td>
        <td>{{ p.matches|length }}</td>
        <td>{{ p.wins()|length }}</td>
        <td>{{ p.losses()|length }}</td>
        <td>{% if p.losses() %}{{ "%0.1f" % ((p.wins()|length)/(p.losses()|length)) }}{% else %}∞{% endif %}</td>
        <td>{{ "%0.1f" % p.confidence() }}</td>
        <td>{{ "%0.1f" % p.skill() }}</td>
        <td>{{ "%0.1f" % p.exposure() }}</td>
        <td class="skillgraph"></td>
        </tr>
    {% endfor %}
    </tbody>
</table>

<script src="{{ request.static_url('volley:static/jquery.tablesort.min.js') }}"></script>
<script>
    $('#player-table').tablesort();

    $('thead th.num').data('sortBy', function (th, td, tablesort) {
        return Number(td.text());
    });

    $('#player-table th')
        .popup()
    ;
</script>

<script src="https://cdn.jsdelivr.net/npm/d3@5.5.0/dist/d3.min.js"></script>
<script>
    const confidence_level = 2;
    const width = 100;
    const height = 10;

    var data = [
        {% for p in players %}
            {mu: {{p.skill()}}, sigma: {{ p.confidence() }}},
        {% endfor %}
    ];

    let domain_min = d3.min(data, function (d, i) {
        return d.mu - confidence_level * d.sigma;
    });
    let domain_max = d3.max(data, function (d, i) {
        return d.mu + confidence_level * d.sigma;
    });

    var x_scale = d3.scaleLinear()
        .domain([domain_min, domain_max])
        .range([2, width - 2]);

    function error_bars(selection) {
        let lb = function (d, i) {
            return x_scale(d.mu - confidence_level * d.sigma);
        };
        let ub = function (d, i) {
            return x_scale(d.mu + confidence_level * d.sigma);
        };


        selection = selection.append('g')
            .on('mouseover', function (d, i) {
                d3.selectAll('.skillgraph svg g')
                    .append('rect')
                    .attr('x', lb(d, i))
                    .attr('y', 0)
                    .attr('width', ub(d, i) - lb(d, i))
                    .attr('height', height)
                    .classed('highlight-overlay', true);
            })
            .on('mouseout', function (d, i) {
                d3.selectAll('.highlight-overlay').remove();
            });


        selection.append('line')
            .attr('y1', height / 2)
            .attr('y2', height / 2)
            .attr('x1', lb)
            .attr('x2', ub);
        selection.append('line')
            .attr('y1', 0)
            .attr('y2', height)
            .attr('x1', lb)
            .attr('x2', lb);
        selection.append('line')
            .attr('y1', 0)
            .attr('y2', height)
            .attr('x1', ub)
            .attr('x2', ub);
        selection.append('circle')
            .attr('r', 4)
            .attr('cy', height / 2)
            .attr('cx', function (d, i) {
                return x_scale(d.mu);
            });
    }


    var svgs = d3.selectAll('.skillgraph')
        .append('svg')
        .attr('width', width)
        .attr('height', height);

    svgs.each(function (svg, index) {
        d3.select(this).selectAll('g')
            .data([data[index]])
            .enter()
            .call(error_bars);

    });

</script>

<style type="text/css">
    svg line {
        stroke-width: 2;
        stroke: #636363;
    }

    svg circle {
        fill: #636363;
    }

    svg .highlight-overlay {
        fill-opacity: 0.2;
        pointer-events: none;
    }
</style>